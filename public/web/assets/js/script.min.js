const root = document.documentElement;
const fieldset = document.querySelector(".fieldset");
const fields = document.querySelectorAll(".field");
const boxes = document.querySelectorAll(".box");
const secretToogle = document.querySelector(".secret-toggle");
let secret = false;
let pinForm = null;

window.onload = function(e){
    pinForm = $(".pin-form");
    sendForm(pinForm);
    fields[0].focus();
}

function getCustomPropertyValue(name) {
    const styles = getComputedStyle(root);
    return styles.getPropertyValue(name);
}

function handleInputField({ target }) {
    const value = target.value.slice(-1);
    target.value = value;

    if (value.match(/[^0-9]/g)){
        target.value="";
        return false;
    }

    const step = value ? 1 : -1;
    const fieldIndex = [...fields].findIndex((field) => field === target);
    const focusToIndex = fieldIndex + step;

    if(focusToIndex >= fields.length){
        pinForm.submit();
        return;
    }

    if (focusToIndex < 0) return;

    fields[focusToIndex].focus();
}

secretToogle.addEventListener("click", event => {
    secret = !secret;
    fields.forEach(input => {
        input.type = secret ? "password" : "text";
    });
});

fields.forEach((field) => {
    field.addEventListener("input", handleInputField);

    field.addEventListener("paste", event => {
        event.preventDefault();
        const pasteData = event.clipboardData.getData("text/plain");
        const code = pasteData.replace(/\D/g, "");
        let i = 0;
        fields.forEach(input => {
            if (input.value === "" && i < code.length) {
                input.value = code[i];
                i++;
            }
        });
        if(i==fields.length){
            pinForm.submit();
        }
    });

});

function getDelay() {
    const firstStepDuration = getCustomPropertyValue(
        "--transition-duration-step-1"
    );
    const secondStepDuration = getCustomPropertyValue(
        "--transition-duration-step-2"
    );
    return parseInt(firstStepDuration) + parseInt(secondStepDuration);
}

function animateFailure() {
    fieldset.classList.add("animate-failure");
    const delay = getDelay();
    setTimeout(() => {
        fieldset.classList.remove("animate-failure");
    }, delay);
}

function errorForm(msg){
    animateFailure();
    fields.forEach((field) => {
        field.value = "";
    });
    fields[0].focus();
}

function sendForm(form){
    $(form).on('submit', function (e) {
        e.preventDefault();
        const param = $(form).serializeArray();
        let code = "";
        fields.forEach((field) => {
            code += field.value;
        })
        param.push({name: 'code', value: code});
        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            data: param,
            dataType: 'json',
            timeout: 60000,
            beforeSend: function () {
                fieldset.classList.remove("animate-failure");
                fieldset.classList.remove("animate-success");
                $(form).find('button[type="submit"]').prop('disabled', true);
            },
            success: function (data) {
                if(data){
                    fieldset.classList.add("animate-success");
                }else{
                    errorForm("Pin not verified");
                }
            },
            error: function (response) {
                errorForm(response.responseJSON.message);
            },
            complete: function () {
                $(form).find('button[type="submit"]').prop('disabled', false);
            }
        });
    });
}
